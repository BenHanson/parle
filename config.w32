// $Id$
// vim:ft=javascript

ARG_ENABLE("parle", "Enable lexer/parser support", "no");
ARG_ENABLE("parle-utf32", "Enable internal UTF-32 support for lexer/parser", "no");

if (PHP_PARLE != "no") {
	var parle_lib_path = configure_module_dirname + "\\lib";
	if (CHECK_HEADER_ADD_INCLUDE("lexertl/generator.hpp", "CFLAGS_PARLE", PHP_PARLE + ";" + parle_lib_path + "\\lexertl14") &&
		CHECK_HEADER_ADD_INCLUDE("parsertl/generator.hpp", "CFLAGS_PARLE", PHP_PARLE + ";" + parle_lib_path + "\\parsertl14") &&
		CHECK_HEADER_ADD_INCLUDE("parle/lexer/iterator.hpp", "CFLAGS_PARLE", PHP_PARLE + ";" + parle_lib_path)) {
		EXTENSION("parle", "parle.cpp", PHP_PARLE_SHARED, "/DZEND_ENABLE_STATIC_TSRMLS_CACHE=1");
		ADD_FLAG("CFLAGS_PARLE", " /I " + parle_lib_path + "\\lexertl14 /I " + parle_lib_path + "\\parsertl14 /EHsc -std:c++14");
		ADD_FLAG("CFLAGS_BD_EXT_PARLE", ' /D ZEND_WIN32_KEEP_INLINE=1 /U ZEND_WIN32_FORCE_INLINE ');
		/*PHP_INSTALL_HEADERS("ext/parle", "php_parle.h");*/
		AC_DEFINE("HAVE_PARLE", 1, "Have parle extension");
		if (PHP_PARLE_UTF32 != "no") {
			AC_DEFINE("HAVE_PARLE_UTF32", 1, "Have internal UTF-32 support in parle");
			ADD_FLAG("CFLAGS_PARLE", " /D HAVE_PARLE_UTF32=1");
		}
	} else {
		WARNING("parle not enabled; libraries and headers not found");
	}
}

